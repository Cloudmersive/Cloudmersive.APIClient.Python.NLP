# coding: utf-8

"""
    nlpapiv2

    The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RephrasedSentenceOption(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rephrased_option_index': 'int',
        'rephrased_sentence_text': 'str'
    }

    attribute_map = {
        'rephrased_option_index': 'RephrasedOptionIndex',
        'rephrased_sentence_text': 'RephrasedSentenceText'
    }

    def __init__(self, rephrased_option_index=None, rephrased_sentence_text=None):  # noqa: E501
        """RephrasedSentenceOption - a model defined in Swagger"""  # noqa: E501

        self._rephrased_option_index = None
        self._rephrased_sentence_text = None
        self.discriminator = None

        if rephrased_option_index is not None:
            self.rephrased_option_index = rephrased_option_index
        if rephrased_sentence_text is not None:
            self.rephrased_sentence_text = rephrased_sentence_text

    @property
    def rephrased_option_index(self):
        """Gets the rephrased_option_index of this RephrasedSentenceOption.  # noqa: E501

        Ordered index of the rephrasing option, 1-based, with 1 being the best option  # noqa: E501

        :return: The rephrased_option_index of this RephrasedSentenceOption.  # noqa: E501
        :rtype: int
        """
        return self._rephrased_option_index

    @rephrased_option_index.setter
    def rephrased_option_index(self, rephrased_option_index):
        """Sets the rephrased_option_index of this RephrasedSentenceOption.

        Ordered index of the rephrasing option, 1-based, with 1 being the best option  # noqa: E501

        :param rephrased_option_index: The rephrased_option_index of this RephrasedSentenceOption.  # noqa: E501
        :type: int
        """

        self._rephrased_option_index = rephrased_option_index

    @property
    def rephrased_sentence_text(self):
        """Gets the rephrased_sentence_text of this RephrasedSentenceOption.  # noqa: E501

        One sentence of output rephrased text of original input sentence  # noqa: E501

        :return: The rephrased_sentence_text of this RephrasedSentenceOption.  # noqa: E501
        :rtype: str
        """
        return self._rephrased_sentence_text

    @rephrased_sentence_text.setter
    def rephrased_sentence_text(self, rephrased_sentence_text):
        """Sets the rephrased_sentence_text of this RephrasedSentenceOption.

        One sentence of output rephrased text of original input sentence  # noqa: E501

        :param rephrased_sentence_text: The rephrased_sentence_text of this RephrasedSentenceOption.  # noqa: E501
        :type: str
        """

        self._rephrased_sentence_text = rephrased_sentence_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RephrasedSentenceOption, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RephrasedSentenceOption):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
