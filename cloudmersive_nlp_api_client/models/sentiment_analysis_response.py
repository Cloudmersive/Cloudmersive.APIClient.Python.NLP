# coding: utf-8

"""
    nlpapiv2

    The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SentimentAnalysisResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'sentiment_classification_result': 'str',
        'sentiment_score_result': 'float',
        'sentence_count': 'int'
    }

    attribute_map = {
        'successful': 'Successful',
        'sentiment_classification_result': 'SentimentClassificationResult',
        'sentiment_score_result': 'SentimentScoreResult',
        'sentence_count': 'SentenceCount'
    }

    def __init__(self, successful=None, sentiment_classification_result=None, sentiment_score_result=None, sentence_count=None):  # noqa: E501
        """SentimentAnalysisResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._sentiment_classification_result = None
        self._sentiment_score_result = None
        self._sentence_count = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if sentiment_classification_result is not None:
            self.sentiment_classification_result = sentiment_classification_result
        if sentiment_score_result is not None:
            self.sentiment_score_result = sentiment_score_result
        if sentence_count is not None:
            self.sentence_count = sentence_count

    @property
    def successful(self):
        """Gets the successful of this SentimentAnalysisResponse.  # noqa: E501

        True if the sentiment analysis operation was successful, false otherwise  # noqa: E501

        :return: The successful of this SentimentAnalysisResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this SentimentAnalysisResponse.

        True if the sentiment analysis operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this SentimentAnalysisResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def sentiment_classification_result(self):
        """Gets the sentiment_classification_result of this SentimentAnalysisResponse.  # noqa: E501

        Classification of input text into a sentiment classification; possible values are \"Positive\", \"Negative\" or \"Neutral\"  # noqa: E501

        :return: The sentiment_classification_result of this SentimentAnalysisResponse.  # noqa: E501
        :rtype: str
        """
        return self._sentiment_classification_result

    @sentiment_classification_result.setter
    def sentiment_classification_result(self, sentiment_classification_result):
        """Sets the sentiment_classification_result of this SentimentAnalysisResponse.

        Classification of input text into a sentiment classification; possible values are \"Positive\", \"Negative\" or \"Neutral\"  # noqa: E501

        :param sentiment_classification_result: The sentiment_classification_result of this SentimentAnalysisResponse.  # noqa: E501
        :type: str
        """

        self._sentiment_classification_result = sentiment_classification_result

    @property
    def sentiment_score_result(self):
        """Gets the sentiment_score_result of this SentimentAnalysisResponse.  # noqa: E501

        Sentiment classification score between -1.0 and +1.0 where scores less than 0 are negative sentiment, scores greater than 0 are positive sentiment and scores close to 0 are neutral.  The greater the value deviates from 0.0 the stronger the sentiment, with +1.0 and -1.0 being maximum positive and negative sentiment, respectively.  # noqa: E501

        :return: The sentiment_score_result of this SentimentAnalysisResponse.  # noqa: E501
        :rtype: float
        """
        return self._sentiment_score_result

    @sentiment_score_result.setter
    def sentiment_score_result(self, sentiment_score_result):
        """Sets the sentiment_score_result of this SentimentAnalysisResponse.

        Sentiment classification score between -1.0 and +1.0 where scores less than 0 are negative sentiment, scores greater than 0 are positive sentiment and scores close to 0 are neutral.  The greater the value deviates from 0.0 the stronger the sentiment, with +1.0 and -1.0 being maximum positive and negative sentiment, respectively.  # noqa: E501

        :param sentiment_score_result: The sentiment_score_result of this SentimentAnalysisResponse.  # noqa: E501
        :type: float
        """

        self._sentiment_score_result = sentiment_score_result

    @property
    def sentence_count(self):
        """Gets the sentence_count of this SentimentAnalysisResponse.  # noqa: E501

        Number of sentences in input text  # noqa: E501

        :return: The sentence_count of this SentimentAnalysisResponse.  # noqa: E501
        :rtype: int
        """
        return self._sentence_count

    @sentence_count.setter
    def sentence_count(self, sentence_count):
        """Sets the sentence_count of this SentimentAnalysisResponse.

        Number of sentences in input text  # noqa: E501

        :param sentence_count: The sentence_count of this SentimentAnalysisResponse.  # noqa: E501
        :type: int
        """

        self._sentence_count = sentence_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SentimentAnalysisResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SentimentAnalysisResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
