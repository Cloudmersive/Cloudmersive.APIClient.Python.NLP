# coding: utf-8

"""
    nlpapiv2

    The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LanguageDetectionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'successful': 'bool',
        'detected_language_three_letter_code': 'str',
        'detected_language_full_name': 'str'
    }

    attribute_map = {
        'successful': 'Successful',
        'detected_language_three_letter_code': 'DetectedLanguage_ThreeLetterCode',
        'detected_language_full_name': 'DetectedLanguage_FullName'
    }

    def __init__(self, successful=None, detected_language_three_letter_code=None, detected_language_full_name=None):  # noqa: E501
        """LanguageDetectionResponse - a model defined in Swagger"""  # noqa: E501

        self._successful = None
        self._detected_language_three_letter_code = None
        self._detected_language_full_name = None
        self.discriminator = None

        if successful is not None:
            self.successful = successful
        if detected_language_three_letter_code is not None:
            self.detected_language_three_letter_code = detected_language_three_letter_code
        if detected_language_full_name is not None:
            self.detected_language_full_name = detected_language_full_name

    @property
    def successful(self):
        """Gets the successful of this LanguageDetectionResponse.  # noqa: E501

        True if the language detection operation was successful, false otherwise  # noqa: E501

        :return: The successful of this LanguageDetectionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._successful

    @successful.setter
    def successful(self, successful):
        """Sets the successful of this LanguageDetectionResponse.

        True if the language detection operation was successful, false otherwise  # noqa: E501

        :param successful: The successful of this LanguageDetectionResponse.  # noqa: E501
        :type: bool
        """

        self._successful = successful

    @property
    def detected_language_three_letter_code(self):
        """Gets the detected_language_three_letter_code of this LanguageDetectionResponse.  # noqa: E501

        ISO 639 three letter language code  # noqa: E501

        :return: The detected_language_three_letter_code of this LanguageDetectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._detected_language_three_letter_code

    @detected_language_three_letter_code.setter
    def detected_language_three_letter_code(self, detected_language_three_letter_code):
        """Sets the detected_language_three_letter_code of this LanguageDetectionResponse.

        ISO 639 three letter language code  # noqa: E501

        :param detected_language_three_letter_code: The detected_language_three_letter_code of this LanguageDetectionResponse.  # noqa: E501
        :type: str
        """

        self._detected_language_three_letter_code = detected_language_three_letter_code

    @property
    def detected_language_full_name(self):
        """Gets the detected_language_full_name of this LanguageDetectionResponse.  # noqa: E501

        The full name (in English) of the detected language  # noqa: E501

        :return: The detected_language_full_name of this LanguageDetectionResponse.  # noqa: E501
        :rtype: str
        """
        return self._detected_language_full_name

    @detected_language_full_name.setter
    def detected_language_full_name(self, detected_language_full_name):
        """Sets the detected_language_full_name of this LanguageDetectionResponse.

        The full name (in English) of the detected language  # noqa: E501

        :param detected_language_full_name: The detected_language_full_name of this LanguageDetectionResponse.  # noqa: E501
        :type: str
        """

        self._detected_language_full_name = detected_language_full_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LanguageDetectionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LanguageDetectionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
