# coding: utf-8

"""
    nlpapiv2

    The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from cloudmersive_nlp_api_client.models.word_position import WordPosition  # noqa: F401,E501


class CorrectWordInSentence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'word': 'WordPosition',
        'correct': 'bool',
        'suggestions': 'list[str]'
    }

    attribute_map = {
        'word': 'Word',
        'correct': 'Correct',
        'suggestions': 'Suggestions'
    }

    def __init__(self, word=None, correct=None, suggestions=None):  # noqa: E501
        """CorrectWordInSentence - a model defined in Swagger"""  # noqa: E501

        self._word = None
        self._correct = None
        self._suggestions = None
        self.discriminator = None

        if word is not None:
            self.word = word
        if correct is not None:
            self.correct = correct
        if suggestions is not None:
            self.suggestions = suggestions

    @property
    def word(self):
        """Gets the word of this CorrectWordInSentence.  # noqa: E501

        Position of the word  # noqa: E501

        :return: The word of this CorrectWordInSentence.  # noqa: E501
        :rtype: WordPosition
        """
        return self._word

    @word.setter
    def word(self, word):
        """Sets the word of this CorrectWordInSentence.

        Position of the word  # noqa: E501

        :param word: The word of this CorrectWordInSentence.  # noqa: E501
        :type: WordPosition
        """

        self._word = word

    @property
    def correct(self):
        """Gets the correct of this CorrectWordInSentence.  # noqa: E501

        True if the word is spelled correctly, false otherwise  # noqa: E501

        :return: The correct of this CorrectWordInSentence.  # noqa: E501
        :rtype: bool
        """
        return self._correct

    @correct.setter
    def correct(self, correct):
        """Sets the correct of this CorrectWordInSentence.

        True if the word is spelled correctly, false otherwise  # noqa: E501

        :param correct: The correct of this CorrectWordInSentence.  # noqa: E501
        :type: bool
        """

        self._correct = correct

    @property
    def suggestions(self):
        """Gets the suggestions of this CorrectWordInSentence.  # noqa: E501

        Suggested spelling improvements  # noqa: E501

        :return: The suggestions of this CorrectWordInSentence.  # noqa: E501
        :rtype: list[str]
        """
        return self._suggestions

    @suggestions.setter
    def suggestions(self, suggestions):
        """Sets the suggestions of this CorrectWordInSentence.

        Suggested spelling improvements  # noqa: E501

        :param suggestions: The suggestions of this CorrectWordInSentence.  # noqa: E501
        :type: list[str]
        """

        self._suggestions = suggestions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CorrectWordInSentence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CorrectWordInSentence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
